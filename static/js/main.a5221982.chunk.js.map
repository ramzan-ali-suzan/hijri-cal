{"version":3,"sources":["components/Navbar.tsx","components/Footer.tsx","components/calendar/Title.tsx","helpers/hijriDate.ts","components/calendar/Grid.tsx","components/calendar/Calendar.tsx","components/App.tsx","index.tsx"],"names":["Navbar","showGDate","onGDateChange","className","name","type","checked","onChange","htmlFor","id","value","Footer","href","target","Title","hijriYear","hijriMonth","hijriMonthName","onPreviousClick","onTodayClick","onNextClick","onClick","color","getYear","year","Number","moment","format","getMonth","month","date","getMonthLastDate","iYear","iMonth","isValid","Grid","hijriDate","datePaddings","Array","from","length","day","_","index","dates","map","Calendar","today","Date","getFullYear","getDate","useState","setIYear","setIMonth","iDate","getMonthNameByGregorian","iMonthName","setIMonthName","useEffect","getMonthName","App","locale","setShowGDate","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a5221982.chunk.js","sourcesContent":["import { ChangeEventHandler } from \"react\";\r\n\r\ntype Props = {\r\n  showGDate: boolean;\r\n  onGDateChange: ChangeEventHandler<HTMLInputElement>;\r\n};\r\n\r\nconst Navbar = ({ showGDate, onGDateChange }: Props) => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"container\">\r\n        <h1 className=\"app-title\">ðŸŒ™ Hijri Calendar</h1>\r\n        <div className=\"control-container\">\r\n          <div className=\"g-date-control\">\r\n            <label className=\"g-date-label\">\r\n              Gregorian Date:\r\n              <input\r\n                name=\"gregorianDate\"\r\n                type=\"checkbox\"\r\n                checked={showGDate}\r\n                onChange={onGDateChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"date-adjust-control\">\r\n            <label htmlFor=\"date-adjust-select\">Adjust Date: </label>\r\n            <select name=\"date-adjust\" id=\"date-adjust-select\">\r\n              <option value=\"0\">0</option>\r\n              <option value=\"+1\">+1</option>\r\n              <option value=\"-1\">-1</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","const Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className=\"container\">\r\n        <a\r\n          href=\"https://productivemuslim.com/the-islamic-calendar-letsgohijri\"\r\n          target=\"blank\"\r\n        >\r\n          Why Hijri Calendar\r\n        </a>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { MouseEventHandler } from \"react\";\r\nimport { ArrowRight, ArrowLeft } from \"react-feather\";\r\n\r\ntype Props = {\r\n  hijriYear: number;\r\n  hijriMonth: number;\r\n  hijriMonthName: string;\r\n  onPreviousClick: MouseEventHandler<HTMLButtonElement>;\r\n  onTodayClick: MouseEventHandler<HTMLButtonElement>;\r\n  onNextClick: MouseEventHandler<HTMLButtonElement>;\r\n};\r\n\r\nconst Title = ({\r\n  hijriYear,\r\n  hijriMonth,\r\n  hijriMonthName,\r\n  onPreviousClick,\r\n  onTodayClick,\r\n  onNextClick,\r\n}: Props) => {\r\n  return (\r\n    <div className=\"calendar-title\">\r\n      <h2 className=\"text-center\">\r\n        {hijriMonth}. {hijriMonthName}, {hijriYear}\r\n      </h2>\r\n      <div>\r\n        <button className=\"btn mr-2 warning\" onClick={onTodayClick}>\r\n          Today\r\n        </button>\r\n        <button className=\"btn mr-1 success\" onClick={onPreviousClick}>\r\n          <ArrowLeft color=\"#fff\" />\r\n        </button>\r\n        <button className=\"btn success\" onClick={onNextClick}>\r\n          <ArrowRight color=\"#fff\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import moment from \"moment-hijri\";\r\n\r\nexport const getYear = (year: number): number => {\r\n  return Number(moment(`${year}`, \"YYYY\").format(\"iYYYY\"));\r\n};\r\n\r\nexport const getMonth = (year: number, month: number, date: number): number => {\r\n  return Number(moment(`${year}/${month}/${date}`, \"YYYY/M/D\").format(\"iM\"));\r\n};\r\n\r\nexport const getMonthName = (iYear: number, iMonth: number): string => {\r\n  return moment(`${iYear}/${iMonth}`, \"iYYYY/iM\").format(\"iMMMM\");\r\n};\r\n\r\nexport const getMonthNameByGregorian = (year: number, month: number, date: number): string => {\r\n  return moment(`${year}/${month}/${date}`, \"YYYY/M/D\").format(\"iMMMM\");\r\n};\r\n\r\nexport const getFullDate = (): string => {\r\n  return moment().format(\"iYYYY/iM/iD\");\r\n};\r\n\r\nexport const getMonthFirstDay = (iYear: number, iMonth: number): number => {\r\n  return moment(`${iYear}/${iMonth}/1`, \"iYYYY/iM/iD\").day();\r\n};\r\n\r\nexport const getMonthLastDate = (iYear: number, iMonth: number): number => {\r\n  return moment(`${iYear}/${iMonth}/30`, \"iYYYY/iM/iD\").isValid() ? 30 : 29;\r\n};\r\n","import moment from \"moment-hijri\";\r\nimport { getMonthLastDate, getMonthFirstDay } from \"../../helpers/hijriDate\";\r\n\r\ntype Props = {\r\n  showGDate: boolean;\r\n  hijriYear: number;\r\n  hijriMonth: number;\r\n  hijriDate: string;\r\n};\r\n\r\nconst Grid = ({ showGDate, hijriYear, hijriMonth, hijriDate }: Props) => {\r\n  const weekDays = [\r\n    \"Al 'Ahad\", // Sunday\r\n    \"Al 'Ithnayn\", // Monday\r\n    \"Ath Thulathaa'\", // Tuesday\r\n    \"Al Arbi'aa'\", // Wednesday\r\n    \"Al Khamees\", // Thursday\r\n    \"Al Juma'a\", // Friday\r\n    \"As Sabt\", // Saturday\r\n  ];\r\n\r\n  const datePaddings = Array.from(\r\n    { length: getMonthFirstDay(hijriYear, hijriMonth) },\r\n    (_, index) => index\r\n  );\r\n\r\n  const dates = Array.from(\r\n    { length: getMonthLastDate(hijriYear, hijriMonth) },\r\n    (_, index) => index + 1\r\n  );\r\n\r\n  const today = (date: number): boolean => {\r\n    return `${hijriYear}/${hijriMonth}/${date}` === hijriDate;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"calendar-grid-header\">\r\n        {weekDays.map((value, index) => {\r\n          return (\r\n            <div className=\"calendar-grid-item\" key={index}>\r\n              {value}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"calendar-grid\">\r\n        {datePaddings.map((_, index) => {\r\n          return <div className=\"calendar-grid-item\" key={index}></div>;\r\n        })}\r\n        {dates.map((value, index) => {\r\n          return (\r\n            <div\r\n              className={`calendar-grid-item ${today(value) ? \"today\" : \"\"}`}\r\n              key={index}\r\n            >\r\n              <span>{value}</span>\r\n              {showGDate && (\r\n                <span className=\"g-date\">\r\n                  {moment(\r\n                    `${hijriYear}/${hijriMonth}/${value}`,\r\n                    \"iYYYY/iM/iD\"\r\n                  ).format(\"D-MMM-YYYY\")}\r\n                </span>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import { useState, useEffect } from \"react\";\r\nimport Title from \"./Title\";\r\nimport Grid from \"./Grid\";\r\nimport {\r\n  getYear,\r\n  getMonth,\r\n  getMonthNameByGregorian,\r\n  getMonthName,\r\n  getFullDate,\r\n} from \"../../helpers/hijriDate\";\r\n\r\ntype Props = {\r\n  showGDate: boolean;\r\n};\r\n\r\nconst Calendar = ({ showGDate }: Props) => {\r\n  const today = new Date();\r\n  const year = today.getFullYear();\r\n  const month = today.getMonth() + 1;\r\n  const date = today.getDate();\r\n\r\n  const [iYear, setIYear] = useState(getYear(year));\r\n  const [iMonth, setIMonth] = useState(getMonth(year, month, date));\r\n  const [iDate] = useState(getFullDate());\r\n  const [iMonthName, setIMonthName] = useState(\r\n    getMonthNameByGregorian(year, month, date)\r\n  );\r\n\r\n  const handlePrevious = () => {\r\n    if (iMonth > 1) {\r\n      setIMonth(iMonth - 1);\r\n    } else {\r\n      setIYear(iYear - 1);\r\n      setIMonth(12);\r\n    }\r\n  };\r\n\r\n  const handleToday = () => {\r\n    setIYear(getYear(year));\r\n    setIMonth(getMonth(year, month, date));\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (iMonth < 12) {\r\n      setIMonth(iMonth + 1);\r\n    } else {\r\n      setIYear(iYear + 1);\r\n      setIMonth(1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIMonthName(getMonthName(iYear, iMonth));\r\n  }, [iMonth, iYear]);\r\n\r\n  return (\r\n    <div className=\"container calendar\">\r\n      <Title\r\n        hijriYear={iYear}\r\n        hijriMonth={iMonth}\r\n        hijriMonthName={iMonthName}\r\n        onPreviousClick={handlePrevious}\r\n        onTodayClick={handleToday}\r\n        onNextClick={handleNext}\r\n      ></Title>\r\n      <Grid\r\n        showGDate={showGDate}\r\n        hijriYear={iYear}\r\n        hijriMonth={iMonth}\r\n        hijriDate={iDate}\r\n      ></Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","import Navbar from \"./Navbar\";\r\nimport Footer from \"./Footer\";\r\nimport Calendar from \"./calendar/Calendar\";\r\nimport moment from \"moment-hijri\";\r\nimport { useState } from \"react\";\r\n\r\nconst App = () => {\r\n  moment.locale(\"en\");\r\n  const [showGDate, setShowGDate] = useState(false);\r\n\r\n  const toggleGDate = () => {\r\n    setShowGDate(!showGDate);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"content-wrap\">\r\n        <Navbar showGDate={showGDate} onGDateChange={toggleGDate}></Navbar>\r\n        <Calendar showGDate={showGDate}></Calendar>\r\n      </div>\r\n      <Footer></Footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"normalize.css\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}