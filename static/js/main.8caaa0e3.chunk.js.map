{"version":3,"sources":["components/Navbar.tsx","components/Footer.tsx","components/calendar/Title.tsx","utils/hijriDate.ts","components/calendar/Grid.tsx","components/calendar/Calendar.tsx","components/App.tsx","index.tsx"],"names":["Navbar","showGDate","onGDateChange","dateAdjust","onDateAjdust","className","name","type","checked","onChange","htmlFor","id","value","e","Footer","href","target","Title","hijriYear","hijriMonth","hijriMonthName","onPreviousClick","onTodayClick","onNextClick","onClick","aria-label","color","getYear","year","Number","moment","format","getMonth","month","date","getFullDate","add","getMonthLastDate","iYear","iMonth","isValid","getGFullDate","iDate","Grid","hijriDate","datePaddings","Array","from","length","day","_","index","dates","map","Calendar","today","Date","getFullYear","getDate","useState","setIYear","setIMonth","setIDate","getMonthNameByGregorian","iMonthName","setIMonthName","useEffect","getMonthName","App","locale","setShowGDate","localStorage","getItem","setDateAdjust","event","selectedDateAdjust","setItem","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8caaa0e3.chunk.js","sourcesContent":["import { ChangeEventHandler } from \"react\";\r\n\r\ntype Props = {\r\n  showGDate: boolean;\r\n  dateAdjust: string;\r\n  onGDateChange: ChangeEventHandler<HTMLInputElement>;\r\n  onDateAjdust: ChangeEventHandler<HTMLSelectElement>;\r\n};\r\n\r\nconst Navbar = ({\r\n  showGDate,\r\n  onGDateChange,\r\n  dateAdjust,\r\n  onDateAjdust,\r\n}: Props) => {\r\n  return (\r\n    <nav className=\"navbar\">\r\n      <div className=\"container\">\r\n        <h1 className=\"app-title\">ðŸŒ™ Hijri Calendar</h1>\r\n        <div className=\"control-container\">\r\n          <div className=\"g-date-control\">\r\n            <label className=\"g-date-label\">\r\n              Gregorian Date:\r\n              <input\r\n                name=\"gregorianDate\"\r\n                type=\"checkbox\"\r\n                checked={showGDate}\r\n                onChange={onGDateChange}\r\n              />\r\n            </label>\r\n          </div>\r\n          <div className=\"date-adjust-control\">\r\n            <label htmlFor=\"date-adjust-select\">Adjust Date: </label>\r\n            <select\r\n              name=\"date-adjust\"\r\n              id=\"date-adjust-select\"\r\n              value={dateAdjust}\r\n              onChange={(e) => onDateAjdust(e)}\r\n            >\r\n              <option value=\"0\">0</option>\r\n              <option value=\"+1\">+1</option>\r\n              <option value=\"-1\">-1</option>\r\n            </select>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n};\r\n\r\nexport default Navbar;\r\n","const Footer = () => {\r\n  return (\r\n    <footer>\r\n      <div className=\"container\">\r\n        <a\r\n          href=\"https://productivemuslim.com/the-islamic-calendar-letsgohijri\"\r\n          target=\"blank\"\r\n        >\r\n          Why Hijri Calendar\r\n        </a>\r\n      </div>\r\n    </footer>\r\n  );\r\n};\r\n\r\nexport default Footer;\r\n","import { MouseEventHandler } from \"react\";\r\nimport { ArrowRight, ArrowLeft } from \"react-feather\";\r\n\r\ntype Props = {\r\n  hijriYear: number;\r\n  hijriMonth: number;\r\n  hijriMonthName: string;\r\n  onPreviousClick: MouseEventHandler<HTMLButtonElement>;\r\n  onTodayClick: MouseEventHandler<HTMLButtonElement>;\r\n  onNextClick: MouseEventHandler<HTMLButtonElement>;\r\n};\r\n\r\nconst Title = ({\r\n  hijriYear,\r\n  hijriMonth,\r\n  hijriMonthName,\r\n  onPreviousClick,\r\n  onTodayClick,\r\n  onNextClick,\r\n}: Props) => {\r\n  return (\r\n    <div className=\"calendar-title\">\r\n      <h2 className=\"text-center\">\r\n        {hijriMonth}. {hijriMonthName}, {hijriYear}\r\n      </h2>\r\n      <div>\r\n        <button className=\"btn mr-2 warning\" onClick={onTodayClick}>\r\n          Today\r\n        </button>\r\n        <button\r\n          className=\"btn mr-1 success\"\r\n          aria-label=\"Previous Month\"\r\n          onClick={onPreviousClick}\r\n        >\r\n          <ArrowLeft color=\"#fff\" />\r\n        </button>\r\n        <button\r\n          className=\"btn success\"\r\n          aria-label=\"Next Month\"\r\n          onClick={onNextClick}\r\n        >\r\n          <ArrowRight color=\"#fff\" />\r\n        </button>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Title;\r\n","import moment from \"moment-hijri\";\r\n\r\nexport const getYear = (year: number): number => {\r\n  return Number(moment(`${year}`, \"YYYY\").format(\"iYYYY\"));\r\n};\r\n\r\nexport const getMonth = (year: number, month: number, date: number): number => {\r\n  return Number(moment(`${year}/${month}/${date}`, \"YYYY/M/D\").format(\"iM\"));\r\n};\r\n\r\nexport const getMonthName = (iYear: number, iMonth: number): string => {\r\n  return moment(`${iYear}/${iMonth}`, \"iYYYY/iM\").format(\"iMMMM\");\r\n};\r\n\r\nexport const getMonthNameByGregorian = (year: number, month: number, date: number): string => {\r\n  return moment(`${year}/${month}/${date}`, \"YYYY/M/D\").format(\"iMMMM\");\r\n};\r\n\r\nexport const getFullDate = (dateAdjust: string): string => {\r\n  return moment().add(Number(dateAdjust), \"days\").format(\"iYYYY/iM/iD\");\r\n};\r\n\r\nexport const getMonthFirstDay = (iYear: number, iMonth: number): number => {\r\n  return moment(`${iYear}/${iMonth}/1`, \"iYYYY/iM/iD\").day();\r\n};\r\n\r\nexport const getMonthLastDate = (iYear: number, iMonth: number): number => {\r\n  return moment(`${iYear}/${iMonth}/30`, \"iYYYY/iM/iD\").isValid() ? 30 : 29;\r\n};\r\n\r\nexport const getGFullDate = (iYear: number, iMonth: number, iDate: number, dateAdjust: string): string => {\r\n  return moment(`${iYear}/${iMonth}/${iDate}`, \"iYYYY/iM/iD\").add(-Number(dateAdjust), \"days\").format(\"D-MMM-YYYY\")\r\n};\r\n","import {\r\n  getMonthLastDate,\r\n  getMonthFirstDay,\r\n  getGFullDate,\r\n} from \"../../utils/hijriDate\";\r\n\r\ntype Props = {\r\n  showGDate: boolean;\r\n  hijriYear: number;\r\n  hijriMonth: number;\r\n  hijriDate: string;\r\n  dateAdjust: string;\r\n};\r\n\r\nconst Grid = ({\r\n  showGDate,\r\n  hijriYear,\r\n  hijriMonth,\r\n  hijriDate,\r\n  dateAdjust,\r\n}: Props) => {\r\n  const weekDays = [\r\n    \"Al 'Ahad\", // Sunday\r\n    \"Al 'Ithnayn\", // Monday\r\n    \"Ath Thulathaa'\", // Tuesday\r\n    \"Al Arbi'aa'\", // Wednesday\r\n    \"Al Khamees\", // Thursday\r\n    \"Al Juma'a\", // Friday\r\n    \"As Sabt\", // Saturday\r\n  ];\r\n\r\n  const datePaddings = Array.from(\r\n    { length: getMonthFirstDay(hijriYear, hijriMonth) + -Number(dateAdjust) },\r\n    (_, index) => index\r\n  );\r\n\r\n  const dates = Array.from(\r\n    { length: getMonthLastDate(hijriYear, hijriMonth) },\r\n    (_, index) => index + 1\r\n  );\r\n\r\n  const today = (date: number): boolean => {\r\n    return `${hijriYear}/${hijriMonth}/${date}` === hijriDate;\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <div className=\"calendar-grid-header\">\r\n        {weekDays.map((value, index) => {\r\n          return (\r\n            <div className=\"calendar-grid-item\" key={index}>\r\n              {value}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n      <div className=\"calendar-grid\">\r\n        {datePaddings.map((_, index) => {\r\n          return <div className=\"calendar-grid-item\" key={index}></div>;\r\n        })}\r\n        {dates.map((value, index) => {\r\n          return (\r\n            <div\r\n              className={`calendar-grid-item ${today(value) ? \"today\" : \"\"}`}\r\n              key={index}\r\n            >\r\n              <span>{value}</span>\r\n              {showGDate && (\r\n                <span className=\"g-date\">\r\n                  {getGFullDate(hijriYear, hijriMonth, value, dateAdjust)}\r\n                </span>\r\n              )}\r\n            </div>\r\n          );\r\n        })}\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Grid;\r\n","import { useState, useEffect } from \"react\";\r\n\r\nimport Title from \"./Title\";\r\nimport Grid from \"./Grid\";\r\nimport {\r\n  getYear,\r\n  getMonth,\r\n  getMonthNameByGregorian,\r\n  getMonthName,\r\n  getFullDate,\r\n} from \"../../utils/hijriDate\";\r\n\r\ntype Props = {\r\n  showGDate: boolean;\r\n  dateAdjust: string;\r\n};\r\n\r\nconst Calendar = ({ showGDate, dateAdjust }: Props) => {\r\n  const today = new Date();\r\n  const year = today.getFullYear();\r\n  const month = today.getMonth() + 1;\r\n  const date = today.getDate();\r\n\r\n  const [iYear, setIYear] = useState(getYear(year));\r\n  const [iMonth, setIMonth] = useState(getMonth(year, month, date));\r\n  const [iDate, setIDate] = useState(getFullDate(dateAdjust));\r\n  const [iMonthName, setIMonthName] = useState(\r\n    getMonthNameByGregorian(year, month, date)\r\n  );\r\n\r\n  const handlePrevious = () => {\r\n    if (iMonth > 1) {\r\n      setIMonth(iMonth - 1);\r\n    } else {\r\n      setIYear(iYear - 1);\r\n      setIMonth(12);\r\n    }\r\n  };\r\n\r\n  const handleToday = () => {\r\n    setIYear(getYear(year));\r\n    setIMonth(getMonth(year, month, date));\r\n  };\r\n\r\n  const handleNext = () => {\r\n    if (iMonth < 12) {\r\n      setIMonth(iMonth + 1);\r\n    } else {\r\n      setIYear(iYear + 1);\r\n      setIMonth(1);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIDate(getFullDate(dateAdjust));\r\n    setIMonthName(getMonthName(iYear, iMonth));\r\n  }, [dateAdjust, iYear, iMonth]);\r\n\r\n  return (\r\n    <div className=\"container calendar\">\r\n      <Title\r\n        hijriYear={iYear}\r\n        hijriMonth={iMonth}\r\n        hijriMonthName={iMonthName}\r\n        onPreviousClick={handlePrevious}\r\n        onTodayClick={handleToday}\r\n        onNextClick={handleNext}\r\n      ></Title>\r\n      <Grid\r\n        showGDate={showGDate}\r\n        hijriYear={iYear}\r\n        hijriMonth={iMonth}\r\n        hijriDate={iDate}\r\n        dateAdjust={dateAdjust}\r\n      ></Grid>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Calendar;\r\n","import { useState } from \"react\";\r\nimport moment from \"moment-hijri\";\r\n\r\nimport Navbar from \"./Navbar\";\r\nimport Footer from \"./Footer\";\r\nimport Calendar from \"./calendar/Calendar\";\r\n\r\nconst App = () => {\r\n  moment.locale(\"en\");\r\n  const [showGDate, setShowGDate] = useState(false);\r\n  const [dateAdjust, setDateAdjust] = useState(\r\n    localStorage.getItem(\"date-adjust\") || \"\"\r\n  );\r\n\r\n  const toggleGDate = () => {\r\n    setShowGDate(!showGDate);\r\n  };\r\n\r\n  const adjustDate = (event: React.FormEvent<HTMLSelectElement>) => {\r\n    const selectedDateAdjust = (event.target as HTMLSelectElement).value;\r\n    setDateAdjust(selectedDateAdjust);\r\n    localStorage.setItem(\"date-adjust\", selectedDateAdjust);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <div className=\"content-wrap\">\r\n        <Navbar\r\n          showGDate={showGDate}\r\n          onGDateChange={toggleGDate}\r\n          dateAdjust={dateAdjust}\r\n          onDateAjdust={adjustDate}\r\n        ></Navbar>\r\n        <Calendar showGDate={showGDate} dateAdjust={dateAdjust}></Calendar>\r\n      </div>\r\n      <Footer></Footer>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport \"normalize.css\";\r\nimport \"./index.css\";\r\nimport App from \"./components/App\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n"],"sourceRoot":""}